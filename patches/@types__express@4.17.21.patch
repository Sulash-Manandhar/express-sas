diff --git a/index.d.ts b/index.d.ts
index b92b15c8a3dbf0126e396efbc87265b630321e25..9c7cf5cf881180f6eb4fc1d10a66fa2a4d97a3ae 100644
--- a/index.d.ts
+++ b/index.d.ts
@@ -19,110 +19,117 @@ import * as serveStatic from "serve-static";
 declare function e(): core.Express;
 
 declare namespace e {
+  /**
+   * This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.
+   * @since 4.16.0
+   */
+  var json: typeof bodyParser.json;
+
+  /**
+   * This is a built-in middleware function in Express. It parses incoming requests with Buffer payloads and is based on body-parser.
+   * @since 4.17.0
+   */
+  var raw: typeof bodyParser.raw;
+
+  /**
+   * This is a built-in middleware function in Express. It parses incoming requests with text payloads and is based on body-parser.
+   * @since 4.17.0
+   */
+  var text: typeof bodyParser.text;
+
+  /**
+   * These are the exposed prototypes.
+   */
+  var application: Application;
+  var request: Request;
+  var response: Response;
+
+  /**
+   * This is a built-in middleware function in Express. It serves static files and is based on serve-static.
+   */
+  var static: serveStatic.RequestHandlerConstructor<Response>;
+
+  /**
+   * This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on body-parser.
+   * @since 4.16.0
+   */
+  var urlencoded: typeof bodyParser.urlencoded;
+
+  /**
+   * This is a built-in middleware function in Express. It parses incoming request query parameters.
+   */
+  export function query(options: qs.IParseOptions | typeof qs.parse): Handler;
+
+  export function Router(options?: RouterOptions): core.Router;
+
+  interface RouterOptions {
     /**
-     * This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.
-     * @since 4.16.0
+     * Enable case sensitivity.
      */
-    var json: typeof bodyParser.json;
+    caseSensitive?: boolean | undefined;
 
     /**
-     * This is a built-in middleware function in Express. It parses incoming requests with Buffer payloads and is based on body-parser.
-     * @since 4.17.0
+     * Preserve the req.params values from the parent router.
+     * If the parent and the child have conflicting param names, the child’s value take precedence.
+     *
+     * @default false
+     * @since 4.5.0
      */
-    var raw: typeof bodyParser.raw;
+    mergeParams?: boolean | undefined;
 
     /**
-     * This is a built-in middleware function in Express. It parses incoming requests with text payloads and is based on body-parser.
-     * @since 4.17.0
+     * Enable strict routing.
      */
-    var text: typeof bodyParser.text;
-
-    /**
-     * These are the exposed prototypes.
-     */
-    var application: Application;
-    var request: Request;
-    var response: Response;
-
-    /**
-     * This is a built-in middleware function in Express. It serves static files and is based on serve-static.
-     */
-    var static: serveStatic.RequestHandlerConstructor<Response>;
-
-    /**
-     * This is a built-in middleware function in Express. It parses incoming requests with urlencoded payloads and is based on body-parser.
-     * @since 4.16.0
-     */
-    var urlencoded: typeof bodyParser.urlencoded;
-
-    /**
-     * This is a built-in middleware function in Express. It parses incoming request query parameters.
-     */
-    export function query(options: qs.IParseOptions | typeof qs.parse): Handler;
-
-    export function Router(options?: RouterOptions): core.Router;
-
-    interface RouterOptions {
-        /**
-         * Enable case sensitivity.
-         */
-        caseSensitive?: boolean | undefined;
-
-        /**
-         * Preserve the req.params values from the parent router.
-         * If the parent and the child have conflicting param names, the child’s value take precedence.
-         *
-         * @default false
-         * @since 4.5.0
-         */
-        mergeParams?: boolean | undefined;
-
-        /**
-         * Enable strict routing.
-         */
-        strict?: boolean | undefined;
-    }
-
-    interface Application extends core.Application {}
-    interface CookieOptions extends core.CookieOptions {}
-    interface Errback extends core.Errback {}
-    interface ErrorRequestHandler<
-        P = core.ParamsDictionary,
-        ResBody = any,
-        ReqBody = any,
-        ReqQuery = core.Query,
-        Locals extends Record<string, any> = Record<string, any>,
-    > extends core.ErrorRequestHandler<P, ResBody, ReqBody, ReqQuery, Locals> {}
-    interface Express extends core.Express {}
-    interface Handler extends core.Handler {}
-    interface IRoute extends core.IRoute {}
-    interface IRouter extends core.IRouter {}
-    interface IRouterHandler<T> extends core.IRouterHandler<T> {}
-    interface IRouterMatcher<T> extends core.IRouterMatcher<T> {}
-    interface MediaType extends core.MediaType {}
-    interface NextFunction extends core.NextFunction {}
-    interface Locals extends core.Locals {}
-    interface Request<
-        P = core.ParamsDictionary,
-        ResBody = any,
-        ReqBody = any,
-        ReqQuery = core.Query,
-        Locals extends Record<string, any> = Record<string, any>,
-    > extends core.Request<P, ResBody, ReqBody, ReqQuery, Locals> {}
-    interface RequestHandler<
-        P = core.ParamsDictionary,
-        ResBody = any,
-        ReqBody = any,
-        ReqQuery = core.Query,
-        Locals extends Record<string, any> = Record<string, any>,
-    > extends core.RequestHandler<P, ResBody, ReqBody, ReqQuery, Locals> {}
-    interface RequestParamHandler extends core.RequestParamHandler {}
-    interface Response<
-        ResBody = any,
-        Locals extends Record<string, any> = Record<string, any>,
-    > extends core.Response<ResBody, Locals> {}
-    interface Router extends core.Router {}
-    interface Send extends core.Send {}
+    strict?: boolean | undefined;
+  }
+
+  interface Application extends core.Application {}
+  interface CookieOptions extends core.CookieOptions {}
+  interface Errback extends core.Errback {}
+  interface ErrorRequestHandler<
+    P = core.ParamsDictionary,
+    ResBody = any,
+    ReqBody = any,
+    ReqQuery = core.Query,
+    Locals extends Record<string, any> = Record<string, any>
+  > extends core.ErrorRequestHandler<P, ResBody, ReqBody, ReqQuery, Locals> {}
+  interface Express extends core.Express {}
+  interface Handler extends core.Handler {}
+  interface IRoute extends core.IRoute {}
+  interface IRouter extends core.IRouter {}
+  interface IRouterHandler<T> extends core.IRouterHandler<T> {}
+  interface IRouterMatcher<T> extends core.IRouterMatcher<T> {}
+  interface MediaType extends core.MediaType {}
+  interface NextFunction extends core.NextFunction {}
+  interface Locals extends core.Locals {}
+  interface Request<
+    P = core.ParamsDictionary,
+    ResBody = any,
+    ReqBody = any,
+    ReqQuery = core.Query,
+    Locals extends Record<string, any> = Record<string, any>
+  > extends core.Request<P, ResBody, ReqBody, ReqQuery, Locals> {
+    user?: {
+      id: string;
+      name: string;
+      email: string;
+      role: string;
+    };
+  }
+  interface RequestHandler<
+    P = core.ParamsDictionary,
+    ResBody = any,
+    ReqBody = any,
+    ReqQuery = core.Query,
+    Locals extends Record<string, any> = Record<string, any>
+  > extends core.RequestHandler<P, ResBody, ReqBody, ReqQuery, Locals> {}
+  interface RequestParamHandler extends core.RequestParamHandler {}
+  interface Response<
+    ResBody = any,
+    Locals extends Record<string, any> = Record<string, any>
+  > extends core.Response<ResBody, Locals> {}
+  interface Router extends core.Router {}
+  interface Send extends core.Send {}
 }
 
 export = e;
